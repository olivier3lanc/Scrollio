/*
    SQUARE ROOT
    DESIGN SYSTEM FUNCTION
    @return the quare root value of the specified number
    @param $number - the number
    Source https://www.antimath.info/css/sass-sqrt-function/
*/
@function ds-sqrt($number) {
    $x0: 1;
    $x1: $x0;
    @for $i from 1 through 10 {
        $x1: $x0 - ($x0 * $x0 - abs($number)) / (2 * $x0);
        $x0: $x1;
    }
    @return $x1;
}
/*
    FONT SIZE
    DESIGN SYSTEM FUNCTION
    @return the value of the specified font size name
    @param $name - the name of the font size specified into config/font-sizes
*/
@function ds-font-size($name) {
    @return map-get($ds-font-sizes, $name);
}

/*
    SPACING
    DESIGN SYSTEM FUNCTION
    @return the value of the specified spacing name
    @param $name - the name of the spacing specified into config/spacings
*/
@function ds-spacing($name) {
    @return map-get($ds-spacings, $name);
}

/*
    LUMINANCE CALCULATION
    DESIGN SYSTEM FUNCTION
    Calculate the luminance for a color.
    @param $color - color - the color to analyze
    @param $method - integer - the method to use
*/
@function ds-luminance($color, $method: $ds-luminance-method) {
    $red: nth($linear-channel-values, red($color) + 1);
    $green: nth($linear-channel-values, green($color) + 1);
    $blue: nth($linear-channel-values, blue($color) + 1);
    @if $method == 1 {
        // Weighted Euclidean Distance in 3D RGB Space http://alienryderflex.com/hsp.html
        @return ds-sqrt(.299 * $red * $red + .587 * $green * $green + .114 * $blue * $blue);
    }
    @elseif $method == 2 {
        // W3C recommandation https://www.w3.org/TR/AERT/#color-contrast
        @return .299 * $red + .587 * $green + .117 * $blue;
    }
    @elseif $method == 3 {
        // Luma sRGB https://en.wikipedia.org/wiki/Rec._709
        @return .2126 * $red + .7152 * $green + .0722 * $blue;
    }
}

/*
    SMART CONTRAST CALCULATION
    DESIGN SYSTEM FUNCTION
    Returns the specified contrasted or accentuated color
    See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
    @param $step - integer from -100 to 100
    @param $color - color value - the color value to process
*/
@function ds-smart-contrast($step, $color) {
    $color_final: null;
    $lightness: lightness($color);
    $luminance: ds-luminance($color);
    //Accentuated contrast mode
    @if $step < 0 {
         @if $luminance > $ds-luminance-threshold {
            $new_amount: -($step/100) * (100 - ds-strip-units($lightness));
            $color_final: lighten($color, $new_amount);
        }
        @else {
            $new_amount: -($step/100) * ds-strip-units($lightness);
            $color_final: darken($color, $new_amount);
        }
    }
    //Smart contrast mode
    @else {
         @if $luminance > $ds-luminance-threshold {
            $new_amount: ($step/100) * ds-strip-units($lightness);
            $color_final: darken($color, $new_amount);
        }
        @else {
            $new_amount: ($step/100) * (100 - ds-strip-units($lightness));
            $color_final: lighten($color, $new_amount);
        }
    }
    @return $color_final;
}

@function ds-contrast-ratio($color1, $color2) {
    $luminance1: ds-luminance($color1);
    $luminance2: ds-luminance($color2);
    $difference: $luminance1 - $luminance2;
    @if $difference <= 0 {
        @return ($luminance2 + 0.05) / ($luminance1 + 0.05);
    }
    @else {
        @return ($luminance1 + 0.05) / ($luminance2 + 0.05);
    }
}

/*
    STRIP UNITS
    DESIGN SYSTEM FUNCTION
    Returns a value without its unit
    @param $string - string - The value  with its unit to trim
*/
@function ds-strip-units($string) {
    @return $string / ($string * 0 + 1);
}
