/*
    MY TYPOGRAPHY
    Include font properties
    @param $name - Name of the typography defined into config/typography
*/
@mixin my-typography($name, $important: false) {
    $properties: map-get($ds-typography, $name);
    @each $property, $value in $properties {
        $endValue: $value;
        @if $property == font-family {
            $endValue: my-font-family($value);
            $fontWeight: map-get(map-get($ds-fonts, $value), weight);
            $numericWeight: 400;
            // 100	Thin (Hairline)
            // 200	Extra Light (Ultra Light)
            // 300	Light
            // 400	Normal
            // 500	Medium
            // 600	Semi Bold (Demi Bold)
            // 700	Bold
            // 800	Extra Bold (Ultra Bold)
            // 900	Black (Heavy)
            @if type-of($fontWeight) == string {
                @if $fontWeight == 'Thin' {
                    $numericWeight: 100;
                }
                @elseif $fontWeight == 'Extra-Light' {
                    $numericWeight: 200;
                }
                @elseif $fontWeight == 'Light' {
                    $numericWeight: 300;
                }
                @elseif $fontWeight == 'Medium' {
                    $numericWeight: 500;
                }
                @elseif $fontWeight == 'Semi-Bold' {
                    $numericWeight: 600;
                }
                @elseif $fontWeight == 'Bold' {
                    $numericWeight: 700;
                }
                @elseif $fontWeight == 'Extra-Bold' {
                    $numericWeight: 800;
                }
                @elseif $fontWeight == 'Black' {
                    $numericWeight: 900;
                }
                font-weight: $numericWeight;
            }
        }
        @if $property == font-size {
            $endValue: my-font-size($value);
        }
        @if $property == color {
            $endValue: my-color($value);
        }
        @if $important {
            $endValue: $endValue + !important;
        }
        #{$property}: $endValue;
    }
}

/*
    MY SCREEN SIZE
    Responsive tool, include a media query declaration
    @param $list - list - List of screen sizes
    @include my-screen-size(xs) {
        h1 { color: red }
    } -> Applies declarations on screen sizes called "xs"

    @include my-screen-size(xs, sm, lg) {
        h1 { color: red }
    }
    Applies declarations on screen sizes called "xs", "sm" and "lg"
*/
@mixin my-screen-size($list...){
    @each $data in $list {
        @if map-has-key($ds-screen-sizes, $data) == true {
            $dataIndex: index(map-keys($ds-screen-sizes), $data);
            $dataValue: map-get($ds-screen-sizes, $data);
            $thePrevIndex: $dataIndex - 1;
            $thePrevDataValue: map-get($ds-screens, $thePrevIndex);
            @if $dataIndex == 1 {
                @media (max-width: map-get($ds-screens, $dataIndex)+$ds-unit) { @content; }
            } @elseif $dataValue == infinite {
                // $thePrevIndex: $dataIndex - 1;
                // $thePrevDataValue: map-get($ds-screens, $thePrevIndex);
                @media (min-width: $thePrevDataValue+$ds-unit) { @content; }
            } @else {
                // $thePrevIndex: $dataIndex - 1;
                // $thePrevDataValue: map-get($ds-screens, $thePrevIndex);
                @media (min-width: $thePrevDataValue+$ds-unit) and (max-width: $dataValue+$ds-unit) { @content; }
            }
        }
    }
}
